#!/bin/bash
set -euo pipefail

# Setup script for Lidarr.Plugin.Common repository
# Initializes the repository with proper structure and configuration

echo "🚀 Setting up Lidarr.Plugin.Common repository..."

# Check if we're in the right directory
if [[ ! -f "src/Lidarr.Plugin.Common.csproj" ]]; then
    echo "❌ Error: This script must be run from the Lidarr.Plugin.Common repository root"
    echo "Expected to find src/Lidarr.Plugin.Common.csproj"
    exit 1
fi

# Create additional required files
echo "📁 Creating additional repository files..."

# Create LICENSE file
cat > LICENSE << 'EOF'
MIT License

Copyright (c) 2025 RicherTunes Community

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF

# Create .gitignore
cat > .gitignore << 'EOF'
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/

# NuGet Packages
*.nupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/

# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*

# Test results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# Coverage reports
coverage/
*.coverage
*.coveragexml

# Visual Studio cache/options directory
.vs/

# JetBrains Rider
.idea/

# User secrets
secrets.json
EOF

# Create Directory.Build.props for solution-wide settings
mkdir -p build/
cat > build/Directory.Build.props << 'EOF'
<Project>
  <PropertyGroup>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <WarningsAsErrors />
    
    <!-- Suppress non-critical warnings -->
    <NoWarn>SA1200;SA1633;CS1591;CS8625;CS8618;CS8604;CS8603;CS8601;CS8602;CS8629</NoWarn>
    
    <!-- Enable source link for debugging -->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    
    <!-- Package defaults -->
    <Company>RicherTunes Community</Company>
    <Copyright>Copyright © 2025 RicherTunes Community</Copyright>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <RepositoryUrl>https://github.com/RicherTunes/Lidarr.Plugin.Common.git</RepositoryUrl>
  </PropertyGroup>
</Project>
EOF

# Create test project structure
echo "🧪 Creating test project structure..."
mkdir -p tests/Lidarr.Plugin.Common.Tests/{Unit,Integration,Performance}

cat > tests/Lidarr.Plugin.Common.Tests/Lidarr.Plugin.Common.Tests.csproj << 'EOF'
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <IsPackable>false</IsPackable>
    <IsTestProject>true</IsTestProject>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.8.0" />
    <PackageReference Include="xunit" Version="2.6.1" />
    <PackageReference Include="xunit.runner.visualstudio" Version="2.5.3" />
    <PackageReference Include="FluentAssertions" Version="6.12.0" />
    <PackageReference Include="Moq" Version="4.20.69" />
    <PackageReference Include="coverlet.collector" Version="6.0.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\Lidarr.Plugin.Common.csproj" />
  </ItemGroup>

</Project>
EOF

# Create basic test files
cat > tests/Lidarr.Plugin.Common.Tests/Unit/FileNameSanitizerTests.cs << 'EOF'
using Xunit;
using FluentAssertions;
using Lidarr.Plugin.Common.Utilities;

namespace Lidarr.Plugin.Common.Tests.Unit
{
    public class FileNameSanitizerTests
    {
        [Theory]
        [InlineData("Valid Name", "Valid Name")]
        [InlineData("Invalid/Name", "Invalid Name")]
        [InlineData("Path\\With\\Slashes", "Path With Slashes")]
        [InlineData("", "Unknown")]
        [InlineData(null, "Unknown")]
        public void SanitizeFileName_ShouldHandleCommonCases(string input, string expected)
        {
            var result = FileNameSanitizer.SanitizeFileName(input);
            result.Should().Be(expected);
        }

        [Fact]
        public void SanitizeFileName_ShouldHandleUnicodeCharacters()
        {
            var input = "Café Münchën 北京";
            var result = FileNameSanitizer.SanitizeFileName(input);
            
            // Should preserve unicode but remove dangerous chars
            result.Should().NotBeNullOrEmpty();
            result.Should().NotContain('/');
            result.Should().NotContain('\\');
        }
    }
}
EOF

# Validate build
echo "🔨 Validating build..."
if ! dotnet build src/Lidarr.Plugin.Common.csproj --configuration Release; then
    echo "❌ Build validation failed"
    exit 1
fi

echo "🧪 Validating tests..."
if ! dotnet test tests/ --verbosity minimal; then
    echo "❌ Test validation failed"
    exit 1
fi

echo "✅ Repository setup completed successfully!"
echo ""
echo "📋 Next steps:"
echo "1. Review and customize configuration files"  
echo "2. Add GitHub secrets for NuGet publishing:"
echo "   - NUGET_API_KEY: For NuGet.org publishing"
echo "   - GITHUB_TOKEN: For GitHub Packages (auto-provided)"
echo "3. Create first release to test CI/CD pipeline"
echo "4. Update plugin repositories to reference NuGet package"
echo ""
echo "🎵 Ready for professional shared library development!"