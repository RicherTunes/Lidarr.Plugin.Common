name: CI

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'

concurrency:
  group: ci-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build_and_test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_ROLL_FORWARD: LatestMajor
    permissions:
      contents: read
      actions: write
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install PowerShell (pwsh)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          . /etc/os-release
          CODENAME=${VERSION_CODENAME:-"jammy"}
          echo "Using Ubuntu codename: $CODENAME"
          curl -fsSL "https://packages.microsoft.com/config/ubuntu/$CODENAME/packages-microsoft-prod.deb" -o packages-microsoft-prod.deb \
            || curl -fsSL "https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb" -o packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Setup .NET SDKs (8 & 6)
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: |
            8.0.x
            6.0.x

      - name: Show dotnet info
        run: dotnet --info

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/global.json', '**/NuGet.config') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore (including CLI framework)
        run: dotnet restore -p:IncludeCLIFramework=true
      - name: Build (Release, all TFMs)
        run: dotnet build src/Lidarr.Plugin.Common.csproj -c Release -warnaserror -p:IncludeCLIFramework=true -p:RunAnalyzersDuringBuild=false -m:1

      - name: Dotnet format (verify - style only)
        run: dotnet format style --verify-no-changes

      - name: Public API drift (net8)
        run: dotnet format src/Abstractions/Lidarr.Plugin.Abstractions.csproj analyzers --verify-no-changes --diagnostics RS0016,RS0017 -p:TargetFramework=net8.0
      - name: Public API drift (net6)
        run: dotnet format src/Abstractions/Lidarr.Plugin.Abstractions.csproj analyzers --verify-no-changes --diagnostics RS0016,RS0017 -p:TargetFramework=net6.0

      - name: Build (Release, warnings as errors)
        run: dotnet build -c Release -warnaserror -p:IncludeCLIFramework=true -p:RunAnalyzersDuringBuild=false -m:1

      - name: Ensure pwsh (Linux only)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v pwsh >/dev/null 2>&1; then
            . /etc/os-release || true
            CODENAME=${VERSION_CODENAME:-"jammy"}
            curl -fsSL "https://packages.microsoft.com/config/ubuntu/$CODENAME/packages-microsoft-prod.deb" -o packages-microsoft-prod.deb \
              || curl -fsSL "https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb" -o packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            sudo apt-get update
            sudo apt-get install -y powershell
          fi

      - name: Test (all TFMs) + coverage
        run: >
          dotnet test -c Release --no-build
          --collect:"XPlat Code Coverage"
          --logger "trx;LogFileName=test_results.trx"

      - name: Install ReportGenerator
        shell: bash
        run: |
          dotnet tool update -g dotnet-reportgenerator-globaltool
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Generate coverage summary
        shell: bash
        run: |
          reportgenerator \
            -reports:"**/TestResults/*/coverage.cobertura.xml" \
            -targetdir:"coverage-report" \
            -reporttypes:"MarkdownSummary;HtmlInline_AzurePipelines"
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          cat coverage-report/Summary.md >> $GITHUB_STEP_SUMMARY || true

      - name: Upload test & coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-and-coverage-${{ matrix.os }}
          path: |
            **/TestResults/*.trx
            **/TestResults/*/coverage.cobertura.xml
            coverage-report/**
          retention-days: 14

  # Remove separate test publishing to avoid third-party actions
  # pack_dry_run job intentionally omitted for PR CI; release builds handle packing
