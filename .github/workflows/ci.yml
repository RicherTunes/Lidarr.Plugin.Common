name: CI

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'

concurrency:
  group: ci-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build_and_test:
    # Skip CI for draft PRs, and for PRs when runners are unavailable unless CI_RUNNERS_AVAILABLE=='true'
    if: ${{ github.event_name != 'pull_request' || (github.event.pull_request.draft != true && vars.CI_RUNNERS_AVAILABLE == 'true') }}
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      actions: read
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install PowerShell (pwsh)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          . /etc/os-release
          CODENAME=${VERSION_CODENAME:-"jammy"}
          echo "Using Ubuntu codename: $CODENAME"
          curl -fsSL "https://packages.microsoft.com/config/ubuntu/$CODENAME/packages-microsoft-prod.deb" -o packages-microsoft-prod.deb \
            || curl -fsSL "https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb" -o packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Setup .NET SDKs (8 & 6)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            6.0.x

      - name: Show dotnet info
        run: dotnet --info

      # Avoid cache to minimize policy-related failures

      - name: Restore (including CLI framework)
        run: dotnet restore -p:IncludeCLIFramework=true
      - name: Build (Release, all TFMs)
        run: dotnet build src/Lidarr.Plugin.Common.csproj -c Release -warnaserror -p:IncludeCLIFramework=true -p:RunAnalyzersDuringBuild=false -m:1

      - name: Dotnet format (verify - style only)
        run: dotnet format style --verify-no-changes

      - name: Public API drift (net8)
        run: dotnet format src/Abstractions/Lidarr.Plugin.Abstractions.csproj analyzers --verify-no-changes --diagnostics RS0016,RS0017 -p:TargetFramework=net8.0
      - name: Public API drift (net6)
        run: dotnet format src/Abstractions/Lidarr.Plugin.Abstractions.csproj analyzers --verify-no-changes --diagnostics RS0016,RS0017 -p:TargetFramework=net6.0

      - name: Build (Release, warnings as errors)
        run: dotnet build -c Release -warnaserror -p:IncludeCLIFramework=true -p:RunAnalyzersDuringBuild=false -m:1

      - name: Test (all TFMs) + coverage
        run: >
          dotnet test -c Release --no-build
          --collect:"XPlat Code Coverage"
          --logger "trx;LogFileName=test_results.trx"

      # Omit artifact uploads and coverage summary in PR CI
  # Remove separate test publishing to avoid third-party actions
  # Remove pack dry run for PR CI to avoid requiring gh CLI and extra tools
