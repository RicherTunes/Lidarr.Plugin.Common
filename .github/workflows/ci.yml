name: CI

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'

concurrency:
  group: ci-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build_and_test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDKs (8 & 6)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            6.0.x

      - name: Show dotnet info
        run: dotnet --info

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/global.json', '**/NuGet.config') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore (including CLI framework)
        run: dotnet restore -p:IncludeCLIFramework=true
      - name: Build (Release, all TFMs)
        run: dotnet build src/Lidarr.Plugin.Common.csproj -c Release -warnaserror -p:IncludeCLIFramework=true

      - name: Dotnet format (verify - style only)
        run: dotnet format style --verify-no-changes

      - name: Public API drift (net8)
        run: dotnet format src/Abstractions/Lidarr.Plugin.Abstractions.csproj analyzers --verify-no-changes --diagnostics RS0016,RS0017 -p:TargetFramework=net8.0
      - name: Public API drift (net6)
        run: dotnet format src/Abstractions/Lidarr.Plugin.Abstractions.csproj analyzers --verify-no-changes --diagnostics RS0016,RS0017 -p:TargetFramework=net6.0

      - name: Build (Release, warnings as errors)
        run: dotnet build -c Release -warnaserror -p:IncludeCLIFramework=true -m:1

      - name: Test (all TFMs) + coverage
        run: >
          dotnet test -c Release --no-build
          --collect:"XPlat Code Coverage"
          --logger "trx;LogFileName=test_results.trx"

      - name: Upload test & coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-and-coverage-${{ matrix.os }}
          path: |
            **/TestResults/*.trx
            **/TestResults/*/coverage.cobertura.xml

      - name: Generate coverage summary
        if: success()
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.4
        with:
          reports: "**/TestResults/*/coverage.cobertura.xml"
          targetdir: "coverage-report"
          reporttypes: "MarkdownSummary;HtmlInline_AzurePipelines"
          toolpath: "reportgenerator"
      - name: Collect Abstractions binlog on failure
        if: failure()
        run: dotnet build src/Abstractions/Lidarr.Plugin.Abstractions.csproj -c Release -bl:abs.binlog

      - name: Upload Abstractions binlog
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: msbuild-binlog-${{ matrix.os }}
          path: abs.binlog

  report_tests:
    name: Publish Test Results
    runs-on: ubuntu-latest
    needs: build_and_test
    if: always()
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Annotate PR with test results
        if: github.event_name == 'pull_request'
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "artifacts/**/TestResults/*.trx"
  pack_dry_run:
    name: Pack (dry run)
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            6.0.x
      - name: Restore (including CLI framework)
        run: dotnet restore -p:IncludeCLIFramework=true
      - name: Build (Release, all TFMs)
        run: dotnet build src/Lidarr.Plugin.Common.csproj -c Release -warnaserror -p:IncludeCLIFramework=true -m:1
      - name: Resolve Docker reference (optional)
        shell: bash
        run: |
          # Prefer repository variables if set; otherwise leave empty
          echo "DOCKER_TAG=${DOCKER_TAG:-${{ vars.DOCKER_TAG }}}" >> $GITHUB_ENV
          echo "DOCKER_DIGEST=${DOCKER_DIGEST:-${{ vars.DOCKER_DIGEST }}}" >> $GITHUB_ENV
          echo "Resolved DockerTag='$DOCKER_TAG'"
          echo "Resolved DockerDigest='$DOCKER_DIGEST'"

      - name: Pack nupkg
        run: |
          dotnet pack src/Lidarr.Plugin.Common.csproj -c Release -o dist /p:ContinuousIntegrationBuild=true -p:DockerTag="$DOCKER_TAG" -p:DockerDigest="$DOCKER_DIGEST"
          dotnet pack src/Abstractions/Lidarr.Plugin.Abstractions.csproj -c Release -o dist /p:ContinuousIntegrationBuild=true -p:DockerTag="$DOCKER_TAG" -p:DockerDigest="$DOCKER_DIGEST"
          dotnet pack testkit/Lidarr.Plugin.Common.TestKit.csproj -c Release -o dist /p:ContinuousIntegrationBuild=true -p:DockerTag="$DOCKER_TAG" -p:DockerDigest="$DOCKER_DIGEST"
      - name: API compatibility (Abstractions vs previous)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet tool update --global microsoft.dotnet.apicompat.tool --version 9.0.305
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          PREV_TAG=$(gh release view --json tagName --jq .tagName 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "No previous release detected; skipping API compatibility."
            exit 0
          fi
          mkdir -p prev
          if ! gh release download "$PREV_TAG" -p "Lidarr.Plugin.Abstractions.*.nupkg" -D prev; then
            echo "Previous release found but no Abstractions package; skipping API compatibility."
            exit 0
          fi
          CURRENT_PACKAGE=$(ls dist/Lidarr.Plugin.Abstractions.*.nupkg | head -n 1)
          PREV_PACKAGE=$(ls prev/Lidarr.Plugin.Abstractions.*.nupkg | head -n 1)
          if [ -z "$PREV_PACKAGE" ] || [ -z "$CURRENT_PACKAGE" ]; then
            echo "Missing package for API compatibility; skipping."
            exit 0
          fi
          apicompat package --package "$CURRENT_PACKAGE" --baseline-package "$PREV_PACKAGE"
      - name: Upload nupkg
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: dist/*.nupkg


