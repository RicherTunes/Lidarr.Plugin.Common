name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

# Some org/repo policies require explicit top-level permissions.
# Also ensures the job can push packages while defaulting contents to read-only.
permissions:
  contents: read
  packages: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_pack_publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            6.0.x

      - name: Configure private TagLib feed (release only)
        if: startsWith(github.ref, 'refs/tags/v') && env.ADO_TAGLIB_NUGET_URL != ''
        env:
          ADO_TAGLIB_NUGET_URL: ${{ secrets.ADO_TAGLIB_NUGET_URL }}
        run: |
          dotnet nuget add source --name lidarr-taglib "$ADO_TAGLIB_NUGET_URL"

      - name: Restore & Build (no analyzers)
        run: |
          dotnet restore -p:UseLidarrTagLib=true
          dotnet build -c Release -warnaserror -p:RunAnalyzersDuringBuild=false -m:1 -p:UseLidarrTagLib=true

      - name: Public API drift (net8)
        run: dotnet format src/Abstractions/Lidarr.Plugin.Abstractions.csproj analyzers --verify-no-changes --diagnostics RS0016,RS0017 -p:TargetFramework=net8.0

      - name: Public API drift (net6)
        run: dotnet format src/Abstractions/Lidarr.Plugin.Abstractions.csproj analyzers --verify-no-changes --diagnostics RS0016,RS0017 -p:TargetFramework=net6.0

      - name: Test (PR/branch)
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: dotnet test -c Release --no-build --collect:"XPlat Code Coverage"

      - name: Test (release tag; skip known timing flake)
        if: startsWith(github.ref, 'refs/tags/v')
        run: >
          dotnet test -c Release --no-build --collect:"XPlat Code Coverage"
          --filter FullyQualifiedName!~RetrySemanticsTests.ExecuteWithResilienceAsync_PrefersRetryAfterDate_AndClampsToBudget

      - name: Verify tag matches package versions
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF#refs/tags/}"
          VER="${TAG#v}"
          echo "Verifying tag '$TAG' matches <Version> '$VER' in csprojs..."
          grep -q "<Version>${VER}</Version>" src/Lidarr.Plugin.Common.csproj
          grep -q "<Version>${VER}</Version>" src/Abstractions/Lidarr.Plugin.Abstractions.csproj
          echo "OK: Tag matches package versions."

      - name: Pack
        run: |
          dotnet pack src/Abstractions/Lidarr.Plugin.Abstractions.csproj -c Release -o dist /p:ContinuousIntegrationBuild=true -p:UseLidarrTagLib=true
          dotnet pack src/Lidarr.Plugin.Common.csproj -c Release -o dist /p:ContinuousIntegrationBuild=true -p:UseLidarrTagLib=true

      - name: API compatibility (Abstractions vs previous)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet tool update --global microsoft.dotnet.apicompat.tool --version 9.0.305
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          PREV_TAG=$(gh release view --json tagName --jq .tagName 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "No previous release detected; skipping API compatibility."
            exit 0
          fi
          mkdir -p prev
          if ! gh release download "$PREV_TAG" -p "Lidarr.Plugin.Abstractions.*.nupkg" -D prev; then
            echo "Previous release found but no Abstractions package; skipping API compatibility."
            exit 0
          fi
          CURRENT_PACKAGE=$(ls dist/Lidarr.Plugin.Abstractions.*.nupkg | head -n 1)
          PREV_PACKAGE=$(ls prev/Lidarr.Plugin.Abstractions.*.nupkg | head -n 1)
          if [ -z "$PREV_PACKAGE" ] || [ -z "$CURRENT_PACKAGE" ]; then
            echo "Missing package for API compatibility; skipping."
            exit 0
          fi
          apicompat package --package "$CURRENT_PACKAGE" --baseline-package "$PREV_PACKAGE"

      - name: Publish to NuGet.org (if API key present)
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${NUGET_API_KEY:-}" ]; then
            echo "NUGET_API_KEY not set; skipping publish to NuGet.org."
            exit 0
          fi
          dotnet nuget push "dist/*.nupkg" --source https://api.nuget.org/v3/index.json --api-key "$NUGET_API_KEY" --skip-duplicate
