<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lidarr.Plugin.Common</name>
    </assembly>
    <members>
        <member name="T:Lidarr.Plugin.Common.Base.BaseStreamingSettings">
            <summary>
            Base class for streaming service plugin settings.
            Provides common configuration properties that all streaming services need.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.BaseUrl">
            <summary>
            Base URL for the streaming service API.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.Email">
            <summary>
            User's email address for authentication.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.Password">
            <summary>
            User's password for authentication.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.AuthToken">
            <summary>
            Authentication token (for services that support token-based auth).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.UserId">
            <summary>
            User ID (for services that require it).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.CountryCode">
            <summary>
            Country/region code for content availability.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.SearchLimit">
            <summary>
            Maximum number of search results to fetch per query.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.IncludeSingles">
            <summary>
            Whether to include singles and EPs in search results.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.IncludeCompilations">
            <summary>
            Whether to include compilation albums in search results.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.ApiRateLimit">
            <summary>
            Maximum API requests per minute to avoid rate limiting.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.SearchCacheDuration">
            <summary>
            How long to cache search results (in minutes).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.ConnectionTimeout">
            <summary>
            Connection timeout for API requests (in seconds).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.EarlyReleaseDayLimit">
            <summary>
            Include albums up to this many days before official release.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.CacheDuration">
            <summary>
            Gets the cache duration as a TimeSpan.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.RequestTimeout">
            <summary>
            Gets the connection timeout as a TimeSpan.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Base.BaseStreamingSettings.RateLimitWindow">
            <summary>
            Gets the rate limit as requests per minute.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.BaseStreamingSettings.IsValid(System.String@)">
            <summary>
            Validates the settings configuration.
            Override in derived classes to add service-specific validation.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.BaseStreamingSettings.GetMaskedForLogging">
            <summary>
            Gets a masked version of sensitive settings for logging.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Base.StreamingIndexerHelpers">
            <summary>
            SIMPLIFIED APPROACH: Helper utilities for streaming indexers instead of complex inheritance.
            Provides common functionality that any streaming plugin can use without complex integration.
            This follows the chief architect's guidance for incremental adoption.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.StreamingIndexerHelpers.BuildSearchUrl(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Builds a standard search URL for streaming services.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.StreamingIndexerHelpers.CreateStreamingHeaders(System.String,System.String)">
            <summary>
            Creates standard HTTP headers for streaming service requests.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.StreamingIndexerHelpers.EstimateReleaseSize(System.Int32,Lidarr.Plugin.Common.Models.StreamingQualityTier)">
            <summary>
            Estimates release size for Lidarr display.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.StreamingIndexerHelpers.GenerateSearchCacheKey(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates cache key for search results using shared patterns.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.StreamingIndexerHelpers.ValidateSearchCriteria(System.String,System.String,System.String)">
            <summary>
            Validates search criteria and provides helpful error messages.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.StreamingIndexerHelpers.CreateDownloadUrl(System.String,System.String,System.String)">
            <summary>
            Creates standard download URL for streaming services.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.StreamingIndexerHelpers.CreateInfoUrl(System.String,System.String,System.String)">
            <summary>
            Creates standard info URL for streaming services.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.StreamingIndexerHelpers.CreateBasicReleaseInfo(Lidarr.Plugin.Common.Models.StreamingSearchResult,System.String)">
            <summary>
            Maps streaming search result to basic release info properties.
            Plugins can use this as a starting point and customize as needed.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.StreamingIndexerHelpers.ExtractNumericId(System.String)">
            <summary>
            Safely extracts numeric ID from various string formats.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.StreamingIndexerHelpers.GetMusicCategories(System.Boolean)">
            <summary>
            Creates standard categories for music content.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Base.StreamingConfigHelpers">
            <summary>
            SIMPLIFIED: Configuration helpers for streaming plugins.
            Provides utility methods without complex inheritance.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.StreamingConfigHelpers.ValidateStreamingSettings(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Validates common streaming service settings.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Base.StreamingConfigHelpers.CreateMaskedSettings(System.Object)">
            <summary>
            Creates masked settings object for safe logging.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Interfaces.IStreamingAuthenticationService`2">
            <summary>
            Generic authentication service interface for streaming services.
            Provides a common contract for different authentication patterns (OAuth2, token-based, etc.).
            </summary>
            <typeparam name="TSession">The session type specific to the streaming service</typeparam>
            <typeparam name="TCredentials">The credentials type specific to the streaming service</typeparam>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingAuthenticationService`2.AuthenticateAsync(`1)">
            <summary>
            Authenticates with the streaming service using the provided credentials.
            </summary>
            <param name="credentials">The authentication credentials</param>
            <returns>A valid session containing auth tokens and user information</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingAuthenticationService`2.GetValidSessionAsync">
            <summary>
            Gets the current valid session, refreshing if necessary and possible.
            </summary>
            <returns>A valid session or null if authentication is required</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingAuthenticationService`2.ValidateSessionAsync(`0)">
            <summary>
            Validates if a session is still active with the streaming service.
            </summary>
            <param name="session">The session to validate</param>
            <returns>True if the session is valid and active</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingAuthenticationService`2.RefreshSessionAsync(`0)">
            <summary>
            Refreshes an expired session if the service supports it.
            </summary>
            <param name="session">The session to refresh</param>
            <returns>A new valid session or null if refresh is not possible</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingAuthenticationService`2.RevokeSessionAsync(`0)">
            <summary>
            Revokes/logs out the current session.
            </summary>
            <param name="session">The session to revoke</param>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingAuthenticationService`2.GetCachedSession">
            <summary>
            Gets the currently cached session without validation.
            </summary>
            <returns>The cached session or null if none exists</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingAuthenticationService`2.ClearSession">
            <summary>
            Clears the cached session from memory/storage.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingAuthenticationService`2.StoreSession(`0)">
            <summary>
            Stores a valid session in the cache.
            </summary>
            <param name="session">The session to cache</param>
        </member>
        <member name="T:Lidarr.Plugin.Common.Interfaces.IAuthSession">
            <summary>
            Base interface for authentication sessions.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.IAuthSession.AccessToken">
            <summary>
            The primary access token for API calls.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.IAuthSession.ExpiresAt">
            <summary>
            When the session expires (if known).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.IAuthSession.IsExpired">
            <summary>
            Whether the session has expired.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.IAuthSession.Metadata">
            <summary>
            Service-specific metadata about the session.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Interfaces.IAuthCredentials">
            <summary>
            Base interface for authentication credentials.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.IAuthCredentials.Type">
            <summary>
            The type of authentication these credentials represent.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IAuthCredentials.IsValid(System.String@)">
            <summary>
            Validates that the credentials are complete and properly formatted.
            </summary>
            <param name="errorMessage">Error message if validation fails</param>
            <returns>True if credentials are valid</returns>
        </member>
        <member name="T:Lidarr.Plugin.Common.Interfaces.AuthenticationType">
            <summary>
            Types of authentication supported by streaming services.
            </summary>
        </member>
        <member name="F:Lidarr.Plugin.Common.Interfaces.AuthenticationType.UsernamePassword">
            <summary>
            Username/email and password authentication.
            </summary>
        </member>
        <member name="F:Lidarr.Plugin.Common.Interfaces.AuthenticationType.OAuth2">
            <summary>
            OAuth2 authorization code flow.
            </summary>
        </member>
        <member name="F:Lidarr.Plugin.Common.Interfaces.AuthenticationType.ApiKey">
            <summary>
            Simple API key authentication.
            </summary>
        </member>
        <member name="F:Lidarr.Plugin.Common.Interfaces.AuthenticationType.Token">
            <summary>
            Pre-existing token authentication.
            </summary>
        </member>
        <member name="F:Lidarr.Plugin.Common.Interfaces.AuthenticationType.Certificate">
            <summary>
            Certificate-based authentication.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Interfaces.AuthResult`1">
            <summary>
            Result of an authentication attempt.
            </summary>
            <typeparam name="TSession">The session type</typeparam>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.AuthResult`1.Success">
            <summary>
            Whether authentication was successful.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.AuthResult`1.Session">
            <summary>
            The authenticated session (if successful).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.AuthResult`1.ErrorMessage">
            <summary>
            Error message if authentication failed.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.AuthResult`1.ErrorType">
            <summary>
            The type of error that occurred.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.AuthResult`1.ErrorContext">
            <summary>
            Additional context about the error.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.AuthResult`1.Successful(`0)">
            <summary>
            Creates a successful authentication result.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.AuthResult`1.Failed(System.String,Lidarr.Plugin.Common.Interfaces.AuthErrorType)">
            <summary>
            Creates a failed authentication result.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Interfaces.AuthErrorType">
            <summary>
            Types of authentication errors.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Interfaces.IStreamingResponseCache">
            <summary>
            Generic response cache interface for streaming service API calls.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingResponseCache.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets a cached response if available.
            </summary>
            <typeparam name="T">Type of the cached object</typeparam>
            <param name="endpoint">API endpoint</param>
            <param name="parameters">Request parameters</param>
            <returns>Cached object or null if not found</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingResponseCache.Set``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},``0)">
            <summary>
            Sets a response in the cache with default duration.
            </summary>
            <typeparam name="T">Type of the object to cache</typeparam>
            <param name="endpoint">API endpoint</param>
            <param name="parameters">Request parameters</param>
            <param name="value">Value to cache</param>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingResponseCache.Set``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},``0,System.TimeSpan)">
            <summary>
            Sets a response in the cache with specific duration.
            </summary>
            <typeparam name="T">Type of the object to cache</typeparam>
            <param name="endpoint">API endpoint</param>
            <param name="parameters">Request parameters</param>
            <param name="value">Value to cache</param>
            <param name="duration">Cache duration</param>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingResponseCache.ShouldCache(System.String)">
            <summary>
            Determines if an endpoint should be cached.
            </summary>
            <param name="endpoint">API endpoint</param>
            <returns>True if the endpoint should be cached</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingResponseCache.GetCacheDuration(System.String)">
            <summary>
            Gets the default cache duration for an endpoint.
            </summary>
            <param name="endpoint">API endpoint</param>
            <returns>Cache duration</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingResponseCache.GenerateCacheKey(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates a cache key for the given endpoint and parameters.
            </summary>
            <param name="endpoint">API endpoint</param>
            <param name="parameters">Request parameters</param>
            <returns>Cache key</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingResponseCache.Clear">
            <summary>
            Clears all cached responses.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingResponseCache.ClearEndpoint(System.String)">
            <summary>
            Clears cached responses for a specific endpoint.
            </summary>
            <param name="endpoint">Endpoint to clear</param>
        </member>
        <member name="T:Lidarr.Plugin.Common.Interfaces.IStreamingTokenProvider">
            <summary>
            Interface for streaming service token providers.
            Handles authentication token management for streaming services.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingTokenProvider.GetAccessTokenAsync">
            <summary>
            Gets a valid access token for API calls.
            </summary>
            <returns>Valid access token or null if authentication failed</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingTokenProvider.RefreshTokenAsync">
            <summary>
            Refreshes an expired token if the service supports it.
            </summary>
            <returns>New access token or null if refresh failed/not supported</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingTokenProvider.ValidateTokenAsync(System.String)">
            <summary>
            Validates if a token is still valid.
            </summary>
            <param name="token">Token to validate</param>
            <returns>True if token is valid and can be used for API calls</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingTokenProvider.GetTokenExpiration(System.String)">
            <summary>
            Gets token expiration time if known.
            </summary>
            <param name="token">Token to check</param>
            <returns>Expiration time or null if unknown</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingTokenProvider.ClearAuthenticationCache">
            <summary>
            Clears any cached authentication data.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.IStreamingTokenProvider.SupportsRefresh">
            <summary>
            Whether this provider supports token refresh.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.IStreamingTokenProvider.ServiceName">
            <summary>
            Service name for this token provider.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Interfaces.IStreamingDownloadOrchestrator">
            <summary>
            Interface for streaming service download orchestration.
            Coordinates download operations across streaming services.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingDownloadOrchestrator.DownloadAlbumAsync(System.String,System.String,Lidarr.Plugin.Common.Models.StreamingQuality,System.IProgress{Lidarr.Plugin.Common.Interfaces.DownloadProgress})">
            <summary>
            Downloads an album from the streaming service.
            </summary>
            <param name="albumId">Album identifier</param>
            <param name="outputDirectory">Directory to save files</param>
            <param name="quality">Preferred quality (optional)</param>
            <param name="progress">Progress callback (optional)</param>
            <returns>Download result with success status and file paths</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingDownloadOrchestrator.DownloadTrackAsync(System.String,System.String,Lidarr.Plugin.Common.Models.StreamingQuality)">
            <summary>
            Downloads a single track from the streaming service.
            </summary>
            <param name="trackId">Track identifier</param>
            <param name="outputPath">Path to save the file</param>
            <param name="quality">Preferred quality (optional)</param>
            <returns>Download result with success status and file path</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingDownloadOrchestrator.GetAvailableQualitiesAsync(System.String)">
            <summary>
            Gets available qualities for a specific album or track.
            </summary>
            <param name="contentId">Album or track identifier</param>
            <returns>List of available qualities</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingDownloadOrchestrator.EstimateDownloadSizeAsync(System.String,Lidarr.Plugin.Common.Models.StreamingQuality)">
            <summary>
            Estimates download size for planning purposes.
            </summary>
            <param name="albumId">Album identifier</param>
            <param name="quality">Target quality</param>
            <returns>Estimated size in bytes</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Interfaces.IStreamingDownloadOrchestrator.CancelDownloadAsync(System.String)">
            <summary>
            Cancels an ongoing download operation.
            </summary>
            <param name="downloadId">Download operation identifier</param>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.IStreamingDownloadOrchestrator.ServiceName">
            <summary>
            Service name for this orchestrator.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Interfaces.DownloadResult">
            <summary>
            Result of a download operation.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.DownloadResult.Success">
            <summary>
            Whether the download was successful.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.DownloadResult.FilePaths">
            <summary>
            Downloaded file paths.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.DownloadResult.TotalSize">
            <summary>
            Total download size in bytes.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.DownloadResult.Duration">
            <summary>
            Time taken for the download.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.DownloadResult.ErrorMessage">
            <summary>
            Error message if download failed.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.DownloadResult.Metadata">
            <summary>
            Additional metadata about the download.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.DownloadResult.TrackResults">
            <summary>
            Individual track download results.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Interfaces.TrackDownloadResult">
            <summary>
            Result of downloading a single track.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.TrackDownloadResult.TrackId">
            <summary>
            Track identifier.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.TrackDownloadResult.Success">
            <summary>
            Whether the track download was successful.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.TrackDownloadResult.FilePath">
            <summary>
            Path to the downloaded file.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.TrackDownloadResult.FileSize">
            <summary>
            File size in bytes.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.TrackDownloadResult.ActualQuality">
            <summary>
            Actual quality of the downloaded file.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.TrackDownloadResult.DownloadTime">
            <summary>
            Time taken to download this track.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.TrackDownloadResult.ErrorMessage">
            <summary>
            Error message if download failed.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Interfaces.DownloadProgress">
            <summary>
            Progress information for download operations.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.DownloadProgress.CompletedTracks">
            <summary>
            Number of tracks completed.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.DownloadProgress.TotalTracks">
            <summary>
            Total number of tracks.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.DownloadProgress.PercentComplete">
            <summary>
            Progress percentage (0-100).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.DownloadProgress.CurrentTrack">
            <summary>
            Currently downloading track.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.DownloadProgress.EstimatedTimeRemaining">
            <summary>
            Estimated time remaining.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Interfaces.DownloadProgress.BytesPerSecond">
            <summary>
            Current download speed in bytes per second.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Models.StreamingArtist">
            <summary>
            Generic representation of an artist from any streaming service.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingArtist.Id">
            <summary>
            Unique identifier from the streaming service.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingArtist.Name">
            <summary>
            Artist name.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingArtist.Biography">
            <summary>
            Biography or description.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingArtist.Genres">
            <summary>
            Genres associated with this artist.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingArtist.Country">
            <summary>
            Country or origin.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingArtist.ImageUrls">
            <summary>
            Artist image URLs by size.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingArtist.ExternalUrls">
            <summary>
            External URLs (official website, social media, etc.).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingArtist.Metadata">
            <summary>
            Service-specific metadata.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Models.StreamingArtist.GetBestImageUrl(System.String)">
            <summary>
            Gets the best available artist image URL.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Models.StreamingAlbum">
            <summary>
            Generic representation of an album from any streaming service.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.Id">
            <summary>
            Unique identifier from the streaming service.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.Title">
            <summary>
            Album title.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.Artist">
            <summary>
            Primary artist.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.AdditionalArtists">
            <summary>
            Additional artists (collaborations, features).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.ReleaseDate">
            <summary>
            Release date.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.Type">
            <summary>
            Album type (album, single, EP, compilation).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.TrackCount">
            <summary>
            Number of tracks.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.Duration">
            <summary>
            Total duration.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.Genres">
            <summary>
            Genres associated with this album.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.Label">
            <summary>
            Record label.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.Upc">
            <summary>
            UPC/EAN barcode.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.AvailableQualities">
            <summary>
            Available audio qualities.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.CoverArtUrls">
            <summary>
            Album artwork URLs by size.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.ExternalUrls">
            <summary>
            External URLs (streaming service, official links).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingAlbum.Metadata">
            <summary>
            Service-specific metadata.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Models.StreamingAlbum.GetPrimaryArtistName">
            <summary>
            Gets the primary artist name, handling various artists scenarios.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Models.StreamingAlbum.GetAllArtistNames(System.String)">
            <summary>
            Gets all artist names combined.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Models.StreamingAlbum.GetBestCoverArtUrl(System.String)">
            <summary>
            Gets the best available cover art URL.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Models.StreamingAlbum.GetBestQuality">
            <summary>
            Gets the highest available audio quality.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Models.StreamingTrack">
            <summary>
            Generic representation of a track from any streaming service.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.Id">
            <summary>
            Unique identifier from the streaming service.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.Title">
            <summary>
            Track title.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.Artist">
            <summary>
            Primary artist.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.Album">
            <summary>
            Album this track belongs to.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.TrackNumber">
            <summary>
            Track number within the album.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.DiscNumber">
            <summary>
            Disc number for multi-disc albums.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.Duration">
            <summary>
            Track duration.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.IsExplicit">
            <summary>
            Explicit content flag.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.Isrc">
            <summary>
            ISRC code.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.FeaturedArtists">
            <summary>
            Featured artists.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.AvailableQualities">
            <summary>
            Available audio qualities for this specific track.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.PreviewUrl">
            <summary>
            Preview URL (30-90 second snippet).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.Popularity">
            <summary>
            Popularity/play count (service-specific scale).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingTrack.Metadata">
            <summary>
            Service-specific metadata.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Models.StreamingTrack.GetFullTitle">
            <summary>
            Gets the full track title including featured artists.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Models.StreamingTrack.GetBestQuality">
            <summary>
            Gets the highest available audio quality for this track.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Models.StreamingQuality">
            <summary>
            Generic representation of audio quality for streaming services.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingQuality.Id">
            <summary>
            Service-specific quality identifier.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingQuality.Name">
            <summary>
            Human-readable quality name.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingQuality.Format">
            <summary>
            Audio format (MP3, FLAC, AAC, etc.).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingQuality.Bitrate">
            <summary>
            Bitrate in kbps (for lossy formats).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingQuality.SampleRate">
            <summary>
            Sample rate in Hz.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingQuality.BitDepth">
            <summary>
            Bit depth (16, 24, etc.).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingQuality.IsLossless">
            <summary>
            Whether this is a lossless format.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Models.StreamingQuality.IsHighResolution">
            <summary>
            Whether this is high-resolution audio (>44.1kHz or >16bit).
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Models.StreamingQuality.GetTier">
            <summary>
            Gets a quality tier for comparison purposes.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Models.StreamingAlbumType">
            <summary>
            Album types for streaming services.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Models.StreamingQualityTier">
            <summary>
            Universal quality tiers for comparison across services.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Models.StreamingSearchResult">
            <summary>
            Represents a search result from a streaming service.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Models.StreamingSearchType">
            <summary>
            Types of searches supported by streaming services.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Security.InputSanitizer">
            <summary>
            Input sanitization utilities for all streaming plugins
            Prevents injection attacks and ensures safe data handling
            UNIVERSAL: All plugins handle user input and API responses
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Security.InputSanitizer.SanitizeSearchQuery(System.String)">
            <summary>
            Sanitizes search query input to prevent injection attacks
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Security.InputSanitizer.SanitizeFilePath(System.String)">
            <summary>
            Sanitizes file path to prevent directory traversal
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Security.InputSanitizer.SanitizeApiParameter(System.String)">
            <summary>
            Sanitizes API parameter to prevent injection
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Security.InputSanitizer.IsSafeInput(System.String)">
            <summary>
            Validates that string doesn't contain suspicious patterns
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Security.InputSanitizer.SanitizeMetadata(System.String)">
            <summary>
            Sanitizes metadata fields to prevent malicious content
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Security.SecureCredentialManager">
            <summary>
            Secure credential management with memory protection and secure string handling.
            Provides additional security layers for sensitive authentication data.
            UNIVERSAL: All streaming plugins need secure credential storage
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Security.SecureCredentialManager.CreateSecureString(System.String)">
            <summary>
            Creates a SecureString from a regular string and clears the source.
            Provides protection against memory dumps and reduces credential exposure time.
            </summary>
            <param name="source">Source string to secure (will be cleared)</param>
            <returns>SecureString containing the credential data</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Security.SecureCredentialManager.StoreCredential(System.String,System.String)">
            <summary>
            Stores credential securely with automatic encryption
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Security.SecureCredentialManager.GetCredential(System.String)">
            <summary>
            Retrieves credential and automatically clears it from memory after use
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Security.SecureCredentialManager.ClearString(System.String@)">
            <summary>
            Clears string from memory by overwriting with random data
            Best effort - GC may have moved the string
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Security.SecureCredentialWrapper">
            <summary>
            Wrapper for secure credential storage with automatic cleanup
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2">
            <summary>
            Base implementation of streaming service authentication.
            Provides common functionality like session management, caching, and retry logic.
            </summary>
            <typeparam name="TSession">The service-specific session type</typeparam>
            <typeparam name="TCredentials">The service-specific credentials type</typeparam>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.AuthenticateAsync(`1)">
            <summary>
            Authenticates with the streaming service using the provided credentials.
            Includes retry logic and error handling.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.GetValidSessionAsync">
            <summary>
            Gets a valid session, refreshing if necessary and supported.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.ValidateSessionAsync(`0)">
            <summary>
            Validates if a session is still active with the streaming service.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.RefreshSessionAsync(`0)">
            <summary>
            Refreshes an expired session if the service supports it.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.RevokeSessionAsync(`0)">
            <summary>
            Revokes/logs out the current session.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.GetCachedSession">
            <summary>
            Gets the currently cached session without validation.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.ClearSession">
            <summary>
            Clears the cached session from memory.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.StoreSession(`0)">
            <summary>
            Stores a valid session in the cache.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.PerformAuthenticationAsync(`1)">
            <summary>
            Performs the actual authentication with the streaming service.
            Must be implemented by derived classes.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.PerformSessionValidationAsync(`0)">
            <summary>
            Performs session validation with the streaming service.
            Should be overridden by derived classes if supported.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.PerformSessionRefreshAsync(`0)">
            <summary>
            Performs session refresh with the streaming service.
            Should be overridden by derived classes if supported.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.PerformSessionRevocationAsync(`0)">
            <summary>
            Performs session revocation with the streaming service.
            Should be overridden by derived classes if supported.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.SupportsRefresh">
            <summary>
            Whether this service supports session refresh.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.SupportsRevocation">
            <summary>
            Whether this service supports session revocation.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.ClassifyAuthenticationError(System.Exception)">
            <summary>
            Classifies an authentication exception into an error type.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Authentication.BaseStreamingAuthenticationService`2.Dispose">
            <summary>
            Disposes of resources used by this authentication service.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache">
            <summary>
            Generic response cache implementation for streaming service plugins.
            Uses an in-memory cache with TTL support.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.Set``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},``0)">
            <inheritdoc/>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.Set``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.ShouldCache(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.GetCacheDuration(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.GenerateCacheKey(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.ClearEndpoint(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.GetServiceName">
            <summary>
            Gets the service name for cache key prefixing.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.IsSensitiveParameter(System.String)">
            <summary>
            Determines if a parameter is sensitive and should be excluded from cache keys.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.OnCacheHit(System.String,System.String)">
            <summary>
            Called when a cache hit occurs.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.OnCacheMiss(System.String,System.String)">
            <summary>
            Called when a cache miss occurs.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.OnCacheSet(System.String,System.String,System.TimeSpan)">
            <summary>
            Called when an item is set in the cache.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.OnCacheCleared">
            <summary>
            Called when the entire cache is cleared.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.OnEndpointCleared(System.String,System.Int32)">
            <summary>
            Called when an endpoint's cache entries are cleared.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Caching.StreamingResponseCache.OnExpiredItemsCleanup(System.Int32)">
            <summary>
            Called when expired items are cleaned up.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder">
            <summary>
            Builder for creating HTTP requests specific to streaming service APIs.
            Provides a fluent interface for common streaming service request patterns.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.Endpoint(System.String)">
            <summary>
            Sets the API endpoint path.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.Method(System.Net.Http.HttpMethod)">
            <summary>
            Sets the HTTP method.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.Get">
            <summary>
            Convenience method for GET requests.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.Post">
            <summary>
            Convenience method for POST requests.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.Put">
            <summary>
            Convenience method for PUT requests.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.Delete">
            <summary>
            Convenience method for DELETE requests.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.BearerToken(System.String)">
            <summary>
            Adds an authorization header with Bearer token.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.ApiKey(System.String,System.String)">
            <summary>
            Adds an API key header.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.Header(System.String,System.String)">
            <summary>
            Adds a custom header.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.Headers(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds multiple headers from a dictionary.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.Query(System.String,System.String)">
            <summary>
            Adds a query parameter.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.Query(System.String,System.Int32)">
            <summary>
            Adds a query parameter with integer value.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.Query(System.String,System.Boolean)">
            <summary>
            Adds a query parameter with boolean value.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.QueryParams(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds multiple query parameters from a dictionary.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.JsonBody(System.Object)">
            <summary>
            Sets JSON body content for POST/PUT requests.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.FormBody(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets form URL encoded body content.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.Timeout(System.TimeSpan)">
            <summary>
            Sets a custom timeout for this request.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.WithStreamingDefaults(System.String)">
            <summary>
            Sets common headers for music streaming APIs.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.NoCache">
            <summary>
            Adds cache control headers to prevent caching.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.Build">
            <summary>
            Builds the final HttpRequestMessage.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestBuilder.BuildForLogging">
            <summary>
            Builds the request and returns information suitable for logging.
            Sensitive data (auth headers, tokens) are masked.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Http.StreamingApiRequestInfo">
            <summary>
            Information about a streaming API request suitable for logging.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Intelligence.IQueryOptimizer">
            <summary>
            Interface for query optimization engines.
            Allows plugins to implement ML-powered or rule-based query optimization.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Intelligence.IQueryOptimizer.OptimizeQueryAsync(System.String,Lidarr.Plugin.Common.Services.Intelligence.QueryContext)">
            <summary>
            Optimizes a search query to reduce API calls while maintaining accuracy.
            </summary>
            <param name="originalQuery">The original search query</param>
            <param name="context">Additional context for optimization</param>
            <returns>Optimized query that should produce better results</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Intelligence.IQueryOptimizer.LearnFromResultsAsync(System.String,Lidarr.Plugin.Common.Services.Intelligence.QueryResults,Lidarr.Plugin.Common.Services.Intelligence.QueryFeedback)">
            <summary>
            Learns from query results to improve future optimizations.
            </summary>
            <param name="query">The query that was executed</param>
            <param name="results">The results that were returned</param>
            <param name="userFeedback">Whether the results were satisfactory</param>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Intelligence.IQueryOptimizer.GetMetricsAsync">
            <summary>
            Gets optimization statistics and performance metrics.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Intelligence.IQueryOptimizer.ResetAsync">
            <summary>
            Resets the optimization engine to its initial state.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Intelligence.QueryContext">
            <summary>
            Context information for query optimization.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryContext.Type">
            <summary>
            The type of content being searched for.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryContext.Country">
            <summary>
            Country/region code for localized optimization.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryContext.PreferredQuality">
            <summary>
            User's preferred quality tier.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryContext.Metadata">
            <summary>
            Additional context metadata.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryContext.PreviousAttempts">
            <summary>
            Previous query attempts (for retry scenarios).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryContext.Confidence">
            <summary>
            Search confidence level (0.0 - 1.0).
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Intelligence.QueryType">
            <summary>
            Types of queries for optimization.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Intelligence.OptimizedQuery">
            <summary>
            Result of query optimization.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizedQuery.Query">
            <summary>
            The optimized query string.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizedQuery.Confidence">
            <summary>
            Confidence level in this optimization (0.0 - 1.0).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizedQuery.Alternatives">
            <summary>
            Alternative query suggestions.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizedQuery.OptimizationReason">
            <summary>
            Explanation of what optimizations were applied.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizedQuery.IsExperimental">
            <summary>
            Whether this optimization is experimental.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizedQuery.Parameters">
            <summary>
            Additional parameters for the optimized query.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizedQuery.Metrics">
            <summary>
            Performance metrics for this optimization.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Intelligence.QueryResults">
            <summary>
            Results from executing a query.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryResults.ResultCount">
            <summary>
            Number of results returned.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryResults.ExecutionTime">
            <summary>
            Time taken to execute the query.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryResults.HasResults">
            <summary>
            Whether the query found any results.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryResults.RelevanceScore">
            <summary>
            Quality of results (relevance score).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryResults.Metadata">
            <summary>
            Additional result metadata.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Intelligence.QueryFeedback">
            <summary>
            User feedback on query results.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryFeedback.Satisfied">
            <summary>
            Whether the user was satisfied with the results.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryFeedback.Rating">
            <summary>
            Rating of result quality (1-5).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryFeedback.Issues">
            <summary>
            Specific issues with the results.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryFeedback.PreferredResult">
            <summary>
            User's preferred result (if any).
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.QueryFeedback.Comments">
            <summary>
            Additional user comments.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Intelligence.OptimizationMetrics">
            <summary>
            Optimization performance metrics.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizationMetrics.TotalQueries">
            <summary>
            Total queries processed.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizationMetrics.OptimizedQueries">
            <summary>
            Number of queries that were optimized.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizationMetrics.AverageConfidence">
            <summary>
            Average optimization confidence.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizationMetrics.ApiCallReduction">
            <summary>
            Percentage reduction in API calls achieved.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizationMetrics.RelevanceImprovement">
            <summary>
            Average improvement in result relevance.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizationMetrics.TimeRange">
            <summary>
            Time range for these metrics.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Intelligence.OptimizationMetrics.AdditionalMetrics">
            <summary>
            Additional performance metadata.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.LidarrIntegrationHelpers">
            <summary>
            Helper utilities for Lidarr integration that work with ANY streaming plugin.
            These are composition helpers, not inheritance - avoiding complex base class issues.
            Based on patterns from working Qobuzarr implementation.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.LidarrIntegrationHelpers.CreateReleaseInfo``1(Lidarr.Plugin.Common.Models.StreamingSearchResult,System.String,System.Func{System.String,System.String,System.Int64,System.String,System.String,System.DateTime,System.Int32[],``0},System.String)">
            <summary>
            CORRECTED: Creates ReleaseInfo using generic approach to avoid circular dependencies.
            Plugins provide the factory method, shared library provides the data mapping.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.LidarrIntegrationHelpers.CreateReleaseProperties(Lidarr.Plugin.Common.Models.StreamingSearchResult,System.String,System.String)">
            <summary>
            Alternative: Create properties dictionary for flexible ReleaseInfo creation.
            Avoids type dependencies while providing all necessary data.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.LidarrIntegrationHelpers.GenerateTitle(Lidarr.Plugin.Common.Models.StreamingSearchResult)">
            <summary>
            Generates Lidarr-compatible titles from streaming search results.
            Follows patterns from working QobuzParser implementation.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.LidarrIntegrationHelpers.CreateDownloadUrl(Lidarr.Plugin.Common.Models.StreamingSearchResult,System.String)">
            <summary>
            Creates standard download URLs for streaming services.
            Based on working patterns from Qobuzarr.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.LidarrIntegrationHelpers.EstimateSize(Lidarr.Plugin.Common.Models.StreamingSearchResult)">
            <summary>
            Estimates release size for Lidarr display.
            Based on working patterns and realistic streaming service file sizes.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.LidarrIntegrationHelpers.BuildSearchRequest(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Builds search requests using shared HTTP patterns.
            Returns data that plugins can easily convert to IndexerRequest.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.LidarrIntegrationHelpers.ParseApiError(System.String,System.Int32)">
            <summary>
            Parses common streaming API error responses.
            Based on patterns from working Qobuzarr error handling.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.LidarrIntegrationHelpers.ValidateSearchRequest(System.String,System.String,System.String,System.Int32)">
            <summary>
            Validates search criteria using shared patterns.
            Based on working validation from Qobuzarr.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.LidarrIntegrationHelpers.GetStreamingCategories(System.Boolean)">
            <summary>
            Creates standard categories for streaming content.
            Based on working patterns from Qobuzarr.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.LidarrIntegrationHelpers.LogRequest(System.Object,System.String,Lidarr.Plugin.Common.Services.RequestInfo)">
            <summary>
            Helper for plugins to safely log request information.
            Masks sensitive data automatically.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.RequestInfo">
            <summary>
            Information about an HTTP request for streaming services.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.StreamingCacheHelper">
            <summary>
            WORKING PATTERN: Helper for plugins to use shared caching without complex inheritance.
            Based on successful patterns from QobuzResponseCache.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingCacheHelper.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets cached data if available and not expired.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingCacheHelper.Set``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},``0,System.TimeSpan)">
            <summary>
            Sets data in cache with TTL.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingCacheHelper.Clear">
            <summary>
            Clears all cached data.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Performance.IAdaptiveRateLimiter">
            <summary>
            Adaptive rate limiting service that prevents API bans across all streaming plugins
            Learns optimal rates per endpoint and coordinates across multiple plugins
            UNIVERSAL: All streaming APIs have rate limits that need intelligent management
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Performance.PerformanceMonitor">
            <summary>
            Generic performance monitoring service for streaming plugins.
            Tracks API calls, cache performance, and operation timings.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Performance.PerformanceMonitor.RecordApiCall(System.String,System.TimeSpan,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Records an API call timing and result.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Performance.PerformanceMonitor.RecordCacheOperation(System.String,System.String,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Records a cache operation (hit or miss).
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Performance.PerformanceMonitor.RecordDownload(System.String,System.TimeSpan,System.Int64,System.Boolean,System.String)">
            <summary>
            Records a download operation.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Performance.PerformanceMonitor.RecordOperation(System.String,System.TimeSpan,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Records a custom operation timing.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Performance.PerformanceMonitor.GetSummary">
            <summary>
            Gets current performance summary.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Performance.PerformanceMonitor.GetRecentEvents(System.Int32)">
            <summary>
            Gets recent performance events.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Performance.PerformanceMonitor.Reset">
            <summary>
            Clears all performance data.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Performance.PerformanceMonitor.OnMetricsFlush(Lidarr.Plugin.Common.Services.Performance.PerformanceSummary)">
            <summary>
            Called when metrics are periodically flushed.
            Override in derived classes for custom metrics handling.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Performance.OperationMetrics">
            <summary>
            Metrics for a specific operation type.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Performance.OperationSummary">
            <summary>
            Summary of operation performance.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Performance.PerformanceEvent">
            <summary>
            Individual performance event.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Performance.PerformanceSummary">
            <summary>
            Overall performance summary.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Performance.MetricType">
            <summary>
            Types of performance metrics.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Performance.EventType">
            <summary>
            Types of performance events.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Quality.QualityMapper">
            <summary>
            Utilities for mapping and comparing audio quality across different streaming services.
            Provides a unified way to handle quality differences between services.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Quality.QualityMapper.StandardQualities">
            <summary>
            Standard quality definitions for common scenarios.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Quality.QualityMapper.GetQualityTier(Lidarr.Plugin.Common.Models.StreamingQuality)">
            <summary>
            Maps a streaming quality to a universal tier for comparison.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Quality.QualityMapper.FindBestMatch(System.Collections.Generic.IEnumerable{Lidarr.Plugin.Common.Models.StreamingQuality},Lidarr.Plugin.Common.Models.StreamingQualityTier)">
            <summary>
            Finds the best matching quality from available options based on preference.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Quality.QualityMapper.GetBestFromTier(System.Collections.Generic.IList{Lidarr.Plugin.Common.Models.StreamingQuality})">
            <summary>
            Gets the best quality from a group within the same tier.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Quality.QualityMapper.CompareQualities(Lidarr.Plugin.Common.Models.StreamingQuality,Lidarr.Plugin.Common.Models.StreamingQuality)">
            <summary>
            Compares two qualities and returns which one is better.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Quality.QualityMapper.CreatePreferenceMap(Lidarr.Plugin.Common.Models.StreamingQualityTier,System.Boolean,System.Boolean)">
            <summary>
            Creates a quality preference mapping for a specific use case.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Quality.QualityMapper.FromNumericId(System.Int32,System.String)">
            <summary>
            Converts a numeric quality value to a standard quality object.
            Useful for services that use numeric quality IDs.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Quality.QualityMapper.FromStringDescriptor(System.String,System.String)">
            <summary>
            Converts a string quality descriptor to a standard quality object.
            Useful for services that use string quality descriptors.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Quality.QualityMapper.GetQualityDescription(Lidarr.Plugin.Common.Models.StreamingQuality)">
            <summary>
            Gets human-readable description of quality differences.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Quality.QualityPreferenceMap">
            <summary>
            Configuration for quality preference mapping.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Quality.QualityPreferenceMap.IsAcceptable(Lidarr.Plugin.Common.Models.StreamingQualityTier)">
            <summary>
            Checks if a quality tier is acceptable according to this preference map.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Quality.QualityPreferenceMap.GetPreferenceScore(Lidarr.Plugin.Common.Models.StreamingQualityTier)">
            <summary>
            Gets a score for a quality tier (higher = more preferred).
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule">
            <summary>
            Base class for streaming service plugin modules.
            Provides standard patterns for plugin registration and dependency injection setup.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.ServiceName">
            <summary>
            Gets the name of this streaming service plugin.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.Version">
            <summary>
            Gets the version of this plugin.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.Description">
            <summary>
            Gets the description of this plugin.
            </summary>
        </member>
        <member name="P:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.Author">
            <summary>
            Gets the author of this plugin.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.RegisterServices">
            <summary>
            Registers all services required by this streaming plugin.
            This method is called by Lidarr during plugin initialization.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.RegisterCoreServices">
            <summary>
            Registers core plugin services (indexer, download client, settings).
            Must be implemented by derived classes.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.RegisterAuthenticationServices">
            <summary>
            Registers authentication-related services.
            Override to provide custom authentication service implementations.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.RegisterHttpServices">
            <summary>
            Registers HTTP and API client services.
            Override to provide custom HTTP client implementations.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.RegisterCachingServices">
            <summary>
            Registers caching services.
            Override to provide custom caching implementations.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.RegisterQualityServices">
            <summary>
            Registers quality management services.
            Override to provide custom quality mapping implementations.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.RegisterDownloadServices">
            <summary>
            Registers download-related services.
            Override to provide custom download service implementations.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.RegisterCustomServices">
            <summary>
            Registers custom services specific to this streaming service.
            Override to register additional service-specific components.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.GetSingleton``1(System.Func{``0})">
            <summary>
            Creates or retrieves a singleton instance of the specified type.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.GetSingleton(System.Type,System.Func{System.Object})">
            <summary>
            Creates or retrieves a singleton instance of the specified type.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.ValidateRegistration">
            <summary>
            Validates that all required services are properly registered.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.ValidateCoreServices(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Validates that core required services are registered.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.ValidateOptionalServices(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Validates optional services and provides warnings if missing.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.GetMetadata">
            <summary>
            Gets plugin metadata for display in Lidarr.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.HasIndexer">
            <summary>
            Determines if this plugin provides an indexer.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.HasDownloadClient">
            <summary>
            Determines if this plugin provides a download client.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.GetSupportedFeatures">
            <summary>
            Gets the list of features supported by this plugin.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.GetRequiredSettings">
            <summary>
            Gets the list of required settings for this plugin.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.SupportsCaching">
            <summary>
            Whether this plugin supports caching.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.SupportsAuthentication">
            <summary>
            Whether this plugin supports authentication.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.SupportsQualitySelection">
            <summary>
            Whether this plugin supports quality selection.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.Registration.StreamingPluginModule.Dispose">
            <summary>
            Disposes of plugin resources.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Registration.PluginMetadata">
            <summary>
            Plugin metadata for Lidarr display.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Registration.ValidationResult">
            <summary>
            Result of plugin registration validation.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Registration.AutoRegisterServiceAttribute">
            <summary>
            Helper attribute for marking services that should be auto-registered.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.Registration.ServiceLifetime">
            <summary>
            Service lifetime options for dependency injection.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.SafeOperationExecutor">
            <summary>
            Utility class for executing operations safely with common defensive patterns
            Prevents cascading failures and provides consistent error handling
            UNIVERSAL: All plugins need defensive operation patterns
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.SafeOperationExecutor.ExecuteFileOperation``1(System.String,System.Func{System.String,``0},``0,System.Int32)">
            <summary>
            Executes file operation with proper file locking and retry logic
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.SafeOperationExecutor.ExecuteWithTimeoutAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.TimeSpan,``0,System.String)">
            <summary>
            Executes async operation with timeout and defensive error handling
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.SafeOperationExecutor.TryExecute``1(System.Func{``0},``0@,``0)">
            <summary>
            Executes operation with exception containment
            Returns success status and result via out parameter
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.SafeOperationExecutor.TryExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)">
            <summary>
            Executes async operation with exception containment
            Returns success status and result via tuple
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.SafeOperationExecutor.ExecuteWithFallbacks``1(System.Func{``0}[])">
            <summary>
            Executes operation with multiple fallback strategies
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.StreamingIndexerMixin">
            <summary>
            WORKING APPROACH: Mixin helpers that any streaming plugin can use via composition.
            Avoids inheritance complexity while providing shared functionality.
            Based on successful patterns from working Qobuzarr implementation.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingIndexerMixin.ApplyRateLimitAsync(System.Int32)">
            <summary>
            Applies rate limiting using shared patterns.
            Call this before making API requests.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingIndexerMixin.GetCachedResults(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets cached search results if available.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingIndexerMixin.CacheResults(System.String,System.Collections.Generic.List{Lidarr.Plugin.Common.Models.StreamingSearchResult},System.TimeSpan,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Caches search results for future use.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingIndexerMixin.ConvertToReleaseProperties(System.Collections.Generic.List{Lidarr.Plugin.Common.Models.StreamingSearchResult})">
            <summary>
            Converts streaming results to properties dictionaries for flexible ReleaseInfo creation.
            Avoids type dependency issues while providing all necessary data.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingIndexerMixin.ValidateSearch(System.String,System.String,System.String)">
            <summary>
            Validates search criteria before making API calls.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingIndexerMixin.BuildSearchUrl(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Builds search URL with parameters using shared utilities.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingIndexerMixin.CreateHeaders(System.String,System.String)">
            <summary>
            Creates standard headers for streaming service requests.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.StreamingDownloadMixin">
            <summary>
            Mixin helper for streaming download clients.
            Provides shared download patterns without inheritance complexity.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingDownloadMixin.StartDownloadJob(Lidarr.Plugin.Common.Models.StreamingAlbum,System.String)">
            <summary>
            Creates a download job and tracks it.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingDownloadMixin.GetJobStatus(System.String)">
            <summary>
            Gets the status of a download job.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingDownloadMixin.UpdateJobProgress(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Updates download job progress.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingDownloadMixin.CompleteJob(System.String,System.Boolean,System.String)">
            <summary>
            Completes a download job.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingDownloadMixin.CreateSafeFilePath(Lidarr.Plugin.Common.Models.StreamingTrack,System.String)">
            <summary>
            Creates safe file path using shared utilities.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingDownloadMixin.GetActiveJobs">
            <summary>
            Gets all active downloads.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.DownloadJobInfo">
            <summary>
            Information about a download job.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Services.StreamingAuthMixin">
            <summary>
            WORKING PATTERN: Authentication mixin for streaming services.
            Provides shared session management without complex inheritance.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingAuthMixin.GetCachedSession``1">
            <summary>
            Gets cached session if available and valid.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingAuthMixin.StoreSession``1(``0)">
            <summary>
            Stores session in cache.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingAuthMixin.ClearSession">
            <summary>
            Clears cached session.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Services.StreamingAuthMixin.IsSessionValid``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            Validates session using shared patterns.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Testing.MockFactories">
            <summary>
            Factory methods for creating mock streaming service data for testing.
            Provides realistic test data that can be used across different streaming service plugins.
            </summary>
        </member>
        <member name="F:Lidarr.Plugin.Common.Testing.MockFactories.ArtistNames">
            <summary>
            Common artist names for test data.
            </summary>
        </member>
        <member name="F:Lidarr.Plugin.Common.Testing.MockFactories.AlbumTitles">
            <summary>
            Common album titles for test data.
            </summary>
        </member>
        <member name="F:Lidarr.Plugin.Common.Testing.MockFactories.TrackTitles">
            <summary>
            Common track titles for test data.
            </summary>
        </member>
        <member name="F:Lidarr.Plugin.Common.Testing.MockFactories.Genres">
            <summary>
            Common genre names for test data.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Testing.MockFactories.CreateMockArtist(System.String,System.String)">
            <summary>
            Creates a mock streaming artist with realistic data.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Testing.MockFactories.CreateMockAlbum(System.String,System.String,Lidarr.Plugin.Common.Models.StreamingArtist)">
            <summary>
            Creates a mock streaming album with realistic data.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Testing.MockFactories.CreateMockTrack(System.String,System.String,Lidarr.Plugin.Common.Models.StreamingAlbum,System.Nullable{System.Int32})">
            <summary>
            Creates a mock streaming track with realistic data.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Testing.MockFactories.CreateMockQuality(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a mock streaming quality with realistic specifications.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Testing.MockFactories.CreateMockQualities">
            <summary>
            Creates a list of mock qualities representing typical streaming service offerings.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Testing.MockFactories.CreateMockAlbumWithTracks(System.Int32)">
            <summary>
            Creates a mock album with a full track listing.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Testing.MockFactories.CreateMockSettings``1">
            <summary>
            Creates a mock streaming settings object for testing.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Testing.MockFactories.CreateMockSearchResults(System.Int32)">
            <summary>
            Creates a collection of mock search results.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Testing.TestDataSets">
            <summary>
            Test data sets for common streaming service testing scenarios.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Testing.TestDataSets.CreateJazzAlbum">
            <summary>
            Creates a realistic jazz album for testing.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Testing.TestDataSets.CreateClassicalHiResAlbum">
            <summary>
            Creates a high-resolution classical album for quality testing.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Testing.TestDataSets.CreateEdgeCaseAlbum">
            <summary>
            Creates an edge case album with special characters for testing file naming.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Utilities.FileNameSanitizer">
            <summary>
            Utility for sanitizing file and path names to be safe for various file systems.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.FileNameSanitizer.SanitizeFileName(System.String,System.Char)">
            <summary>
            Sanitizes a file name to be safe for file system storage.
            </summary>
            <param name="fileName">The file name to sanitize</param>
            <param name="replacement">Character to replace invalid characters with</param>
            <returns>Sanitized file name</returns>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.FileNameSanitizer.SanitizePath(System.String)">
            <summary>
            Sanitizes a full path to be safe for file system storage.
            </summary>
            <param name="path">The path to sanitize</param>
            <returns>Sanitized path</returns>
        </member>
        <member name="T:Lidarr.Plugin.Common.Utilities.Guard">
            <summary>
            Provides guard clauses for validating method arguments and state.
            Centralizes common validation patterns to reduce code duplication.
            UNIVERSAL: All plugins need argument validation
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.Guard.NotNull``1(``0,System.String)">
            <summary>
            Ensures that the specified argument is not null.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="value">The argument value to validate.</param>
            <param name="paramName">The name of the parameter being validated.</param>
            <returns>The non-null value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when value is null.</exception>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.Guard.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Ensures that the specified string is not null or empty.
            </summary>
            <param name="value">The string value to validate.</param>
            <param name="paramName">The name of the parameter being validated.</param>
            <returns>The non-empty string value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when value is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when value is empty.</exception>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.Guard.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Ensures that the specified string is not null, empty, or whitespace.
            </summary>
            <param name="value">The string value to validate.</param>
            <param name="paramName">The name of the parameter being validated.</param>
            <returns>The non-whitespace string value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when value is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when value is empty or whitespace.</exception>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.Guard.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Ensures that the specified collection is not null or empty.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="value">The collection to validate.</param>
            <param name="paramName">The name of the parameter being validated.</param>
            <returns>The non-empty collection.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when value is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when collection is empty.</exception>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.Guard.InRange``1(``0,``0,``0,System.String)">
            <summary>
            Ensures that the specified value is within the specified range.
            </summary>
            <typeparam name="T">The type of the value (must be comparable).</typeparam>
            <param name="value">The value to validate.</param>
            <param name="min">The minimum allowed value (inclusive).</param>
            <param name="max">The maximum allowed value (inclusive).</param>
            <param name="paramName">The name of the parameter being validated.</param>
            <returns>The value if it's within range.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when value is outside the specified range.</exception>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.Guard.ValidFilePath(System.String,System.String)">
            <summary>
            Ensures that the specified file path is valid (not null, empty, or containing invalid characters).
            </summary>
            <param name="path">The file path to validate.</param>
            <param name="paramName">The name of the parameter being validated.</param>
            <returns>The validated file path.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when path is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when path is invalid.</exception>
        </member>
        <member name="T:Lidarr.Plugin.Common.Utilities.HttpClientExtensions">
            <summary>
            Extension methods for HttpClient to provide common functionality for streaming service plugins.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.HttpClientExtensions.ExecuteWithRetryAsync(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Executes an HTTP request with built-in retry logic and error handling.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.HttpClientExtensions.GetJsonAsync``1(System.Net.Http.HttpClient,System.String,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Executes an HTTP request and deserializes the JSON response.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.HttpClientExtensions.PostJsonAsync``2(System.Net.Http.HttpClient,System.String,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Posts JSON data and returns a deserialized response.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.HttpClientExtensions.BuildUrlWithParams(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Builds a URL with query parameters from a dictionary.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.HttpClientExtensions.AddStandardHeaders(System.Net.Http.HttpRequestMessage,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds standard headers for streaming service API calls.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.HttpClientExtensions.ExecuteWithTimingAsync(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Measures execution time of an HTTP request.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.HttpClientExtensions.ReadContentSafelyAsync(System.Net.Http.HttpContent)">
            <summary>
            Safe method to read response content with encoding detection.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.HttpClientExtensions.IsJsonContent(System.Net.Http.HttpResponseMessage)">
            <summary>
            Validates if the response content type is JSON.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.HttpClientExtensions.MaskSensitiveParams(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a safe copy of sensitive parameters for logging.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Utilities.RetryUtilities">
            <summary>
            Centralized retry and error handling utilities for streaming service plugins.
            This class provides the single source of truth for all retry logic.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.RetryUtilities.IsRetryableException(System.Exception)">
            <summary>
            Determines if an exception is retryable based on common patterns.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.RetryUtilities.IsRetryableStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Determines if an HTTP status code is retryable.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.RetryUtilities.ExecuteWithRetryAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Int32,System.Int32,System.String,System.Action{System.Exception,System.Int32,System.String})">
            <summary>
            Executes an action with exponential backoff retry logic.
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.RetryUtilities.SimpleRetryAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Int32,System.Int32)">
            <summary>
            Executes an action with simple retry logic (no exponential backoff).
            </summary>
        </member>
        <member name="M:Lidarr.Plugin.Common.Utilities.RetryUtilities.ExecuteWithTimeoutAndRetryAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.TimeSpan,System.Int32,System.String,System.Action{System.Exception,System.Int32,System.String})">
            <summary>
            Executes an action with timeout and retry logic.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Utilities.RetryUtilities.CircuitBreaker">
            <summary>
            Implements circuit breaker pattern for repeated failures.
            </summary>
        </member>
        <member name="T:Lidarr.Plugin.Common.Utilities.RetryUtilities.RateLimiter">
            <summary>
            Rate limiter for API calls.
            </summary>
        </member>
    </members>
</doc>
